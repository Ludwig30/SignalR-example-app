@page "/"
@inject JobsService JobsService

<CascadingValue Value="Connection">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" style="display:flex;gap:1rem;padding:0;">
        <MudTextField  Label="Duration" @bind-Value="@_duration" />
        <MudButton style="align-self: flex-end;" Variant="Variant.Outlined" OnClick="AddJob" Color="Color.Success">Add a job</MudButton>
    </MudContainer>
    <JobsList Jobs="_jobs" />
    <MudButton OnClick="RunJobs" Variant="Variant.Outlined" Color="Color.Success">Run all jobs</MudButton>    
</CascadingValue>

@code {
    public HubConnection Connection;
    private int _duration = 1000;
    private List<ClassLibraryJobs.Job> _jobs = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("connection");
        _jobs = JobsService.GetJobs();
        Connection = new HubConnectionBuilder()
                .WithUrl("https://localhost:7034/Jobs")
                .WithAutomaticReconnect()
                .Build();

        Connection.On<string>("JobStarted", id =>
        {
            Console.WriteLine("Job started");
            JobsService.ModifyJob(id, JobStatus.Running);
            StateHasChanged();
        });

        Connection.On<string>("JobComplete", id =>
        {
            Console.WriteLine("job complete");
            JobsService.ModifyJob(id, JobStatus.Complete);
            StateHasChanged();
        });

        Connection.On<string>("JobAdded", id =>
        {
            Console.WriteLine("in job added");
            Console.WriteLine(id);
            var job = new ClassLibraryJobs.Job(id, _duration, JobStatus.Pending);
            JobsService.AddJob(job);
            StateHasChanged();
        });

        await Connection.StartAsync();
    }

    private async Task AddJob()
    {
        await Connection.InvokeAsync("AddJob", _duration);
    }

    private async Task RunJobs()
    {
        List<ClassLibraryJobs.Job> jobs = JobsService.GetJobs();
        foreach (var job in jobs)
        {
            if (job.GetStatus() == JobStatus.Pending)
            {
                await Connection.InvokeAsync("StartJob", job.GetId());
            }
        }        
    }
}